#!/usr/bin/env python3
import os
import common
import json
import pathlib

EXTS = {
    'log': '.log',
    'persist': '.dat',
    'persist-bak': '.dat~',
    'outp': '.csv',
    'outp_raw': '.csv',
    'distr': '.dist'
}

EXTS_rev = {v:k for k,v in EXTS.items()}

def handler_common(args):
    try:
        if args.index:
            handler_index(args)
    except AttributeError:
        pass

class Job:
    def __init__(self, jobdir, jobn):
        self.jobdir = jobdir
        self.name = jobn
        # self.data = {}
        self.files = []

    def add_data(self, suffix):
        self.files.append(suffix)



    def __repr__(self):
        return 'Job:' + repr((self.jobdir,self.name,self.files))

@common.run_once(error=False, warn=False)
def handler_index(args):
    jobdir = args.jobdir
    idxfile = args.index_file
    idxpath = os.path.join(jobdir, idxfile)

    index = {}
    try:
        with open(idxpath, 'r') as idx:
            index = json.load(idx)
    except FileNotFoundError:
        pass

    jobs = {}

    for root,_,files in os.walk(jobdir):
        for file in files:
            path = os.path.join(root, file)
            rpath = pathlib.PurePath(path).relative_to(jobdir)
            jobn = str(rpath.with_suffix(''))

            jobs.setdefault(jobn, Job(jobdir, jobn))
            jobs[jobn].add_data(rpath.suffix)

            # print(file, path)

    print(jobs)

    return
    with open(idxpath, 'w') as idx:
        json.dump(index, idx)

def handler_hist(args):
    pass

if __name__ == '__main__':
    parser = common.CommandParser(description='Suite of analysis tools for data generated by other tools in this repository.')
    parser.add_argument('-j', '--jobdir', default='./jobs', help='data directory')
    parser.add_argument('-i', '--index', default=False, action='store_true',
        help='automatically reindex first')
    parser.add_argument('--index-file', default='_index.json')



    parser_idx = parser.add_command('index', aliases=['idx'],
                help='Index files for use by other commands.',
                description='Index the files in the data directory by -bdw parameters for use by other analysis tools. For most output files, this process will succeed automatically, but where there are multiple jobs for a given parameter set you will be asked to manually resolve the ambiguity.')
    parser_idx.handler(handler_index)



    parser_hist = parser.add_command('histogram', aliases=['hist'],
                help='Generate histograms / approximate PDF plots.',
                description='Reads in data from distribution.py and produces a plot of the approximate PDF.')
    parser_hist.add_argument('-x', action='store_true',
                help='Superimpose the exact equilibrium distribution for a reflecting boundary condition.')
    parser_hist.handler(handler_hist)



    parser_plot = parser.add_command('plot',
                help='Generate MFPT plots.',
                description='',
                epilog='RANGE: Can be a comma delimited list, a hyphenated range, or a mix, e.g. "1,3,6"; "5-9"; "1,3-10,4"; etc. If none or "-", then all matching parameters will be selected.')
    parser_plot.add_argument('-T', '--mfpt', action='store_true',
                help='Generate raw mfpt/distance plot')
    parser_plot.add_argument('-R', '--residue', action='store_true',
                help='Generate residue plot to estimate penalty')
    parser_plot.add_argument('-u', type=float, default=1.5,
                help='Coefficient for unpenalised MFPT used to compute residues.')
    parser_plot.add_argument('-s', '--series', choices="bdw",
                help='Superimpose the specified data series on each plot.')
    parser_plot.add_argument('-b', '--biases', metavar='RANGE', nargs='?',
                help='Which bias(es) to plot.')
    parser_plot.add_argument('-d', '--distances', metavar='RANGE', nargs='?',
                help='Which distance(s) to plot.')
    parser_plot.add_argument('-w', '--widths', metavar='RANGE', nargs='?',
                help='Which width(s) to plot.')
    parser_plot.add_argument('-f', '--format', choices=['pgf','png','eps','gui'], default='gui')



    args = parser.parse_args()
    handler_common(args)
    args.handler(args)
